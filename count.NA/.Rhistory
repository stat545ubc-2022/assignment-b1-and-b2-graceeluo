library(devtools)
document()
?count.NA
library(datateachr)
cancer_sample$dia
document()
?count.NA
document()
build_readme()
build_readme()
build_readme
build_readme()
library(devtools)
build_readme()
devtools::build_readme()
?count.NA
?count.NA
# install.packages("devtools")
devtools::install_github("stat545ubc-2022/assignment-b1-and-b2-graceeluo")
# install.packages("devtools")
devtools::install_github("stat545ubc-2022/assignment-b1-and-b2-graceeluo")
# install.packages("devtools")
devtools::install_github("stat545ubc-2022/assignment-b1-and-b2-graceeluo")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
# install.packages("devtools")
devtools::install_github("stat545ubc-2022/assignment-b1-and-b2-graceeluo")
# install.packages("devtools")
devtools::install_github("stat545ubc-2022/assignment-b1-and-b2-graceeluo/count.NA.summary")
# install.packages("devtools")
devtools::install_github("stat545ubc-2022/assignment-b1-and-b2-graceeluo/count.NA.summary/")
library(count.NA) #load in the package
library(datateachr) #load in example datasets
count.NA(cancer_sample, "diagnosis")
# install.packages("devtools")
devtools::install_github("stat545ubc-2022/assignment-b1-and-b2-graceeluo")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
# install.packages("devtools")
devtools::install_github("stat545ubc-2022/assignment-b1-and-b2-graceeluo")
# install.packages("devtools")
devtools::install_github("stat545ubc-2022/assignment-b1-and-b2-graceeluo/group.NA")
# install.packages("devtools")
devtools::install_github("stat545ubc-2022/assignment-b1-and-b2-graceeluo/count.NA")
library(count.NA) #load in the package
library(datateachr) #load in example datasets
count.NA(cancer_sample, "diagnosis")
library(count.NA) #load in the package
library(datateachr) #load in example datasets
count.NA(cancer_sample, "diagnosis")
use_readme_rmd()
usethis::use_mit_license()
usethis::use_mit_license()
package::function()
package::count.NA()
count.NA()
count.NA::function()
count.NA::count.NA
usethis::use_test()
test()
count.NA <- function(data, col_name) {
if(!is.character(col_name)) {
stop("col_name needs to be a string")
} else if (!(col_name %in% colnames(data))) {
stop("'", col_name, "' does not exist in the data")
} else {
return(as_tibble(data %>% summarise(across(col_name, ~sum(is.na(.x))))))
}
}
test()
library(count.NA)
devtools::test()
rm(list = c("count.NA"))
test("count.NA")
test()
check()
load_all()
check()
use_mit_license("Grace Luo")
document()
library(count.NA)
?count.NA
use_testthat()
use_test("count.NA")
test()
test()
test()
test()
library(count.NA)
test()
document()
test()
test()
test
library(count.NA)
test()
library(tibble)
test()
library(count.NA)
document()
document
document()
library(count.NA)
test()
ilbrary(datateachr)
library(datateachr)
test()
usethis::use_test()
usethis::use_test()
sethis::use_test
use_testthat()
test()
document()
#'
#' @description `count.NA` returns the count of missing values (NA) in a specified column `col_name` of a given dataset `data`
#'
#' @param data Dataset to retrieve the specific column from
#' @param col_name Name of the column (string input) to count missing value(s)
#'
#' @return A tibble (of the dimensions 1 x 1) with variable "col_name" and its value of the integer count of missing values (NA)
#' @importFrom dplyr as_tibble summarise across %>%
#' @import gapminder
#' @export
count.NA <- function(data, col_name) {
if(!is.character(col_name)) {
stop("col_name needs to be a string")
} else if (!(col_name %in% colnames(data))) {
stop("'", col_name, "' does not exist in the data")
} else {
return(as_tibble(data %>% summarise(across(col_name, ~sum(is.na(.x))))))
}
}
document()
rm(list = c("count.NA"))`
document()
library(count.NA)
rm(list = c("count.NA"))
document()
document()
test()
test()
test()
testthat()
test()
test
test
library(count.NA)
test()
# Three expect statements are used to test the function
test_that("Test the function 'count_NA' with dataset 'cancer_sample'", {
expect_equal(count_NA(cancer_sample, "diagnosis"), as_tibble(summarise(cancer_sample, across(diagnosis, ~ sum(is.na(.x))))))
expect_equal(count_NA(cancer_sample, "radius_mean"), as_tibble(summarise(cancer_sample, across(radius_mean, ~ sum(is.na(.x))))))
expect_error(count_NA(cancer_sample, 123), "col_name needs to be a string")
expect_error(count_NA(cancer_sample, "diagnosis_year"), "'diagnosis_year' does not exist in the data")
expect_true(is_tibble(count_NA(cancer_sample, "diagnosis")))
})
# Make the function
count_NA <- function(data, col_name) {
if(!is.character(col_name)) {
stop("col_name needs to be a string")
} else if (!(col_name %in% colnames(data))) {
stop("'", col_name, "' does not exist in the data")
} else {
return(as_tibble(data %>% summarise(across(col_name, ~sum(is.na(.x))))))
}
}
# Document the function
#' Count the missing values (NA) of a variable in a dataset
#'
#' @description `count_NA` returns the count of missing values (NA) in a specified column `col_name` of a given dataset `data`
#'
#' @param data Dataset to retrieve the specific column from
#' @param col_name Name of the column (string input) to count missing value(s)
#'
#' @return A tibble (of the dimensions 1 x 1) with variable "col_name" and its value of the integer count of missing values (NA)
# Three expect statements are used to test the function
test_that("Test the function 'count_NA' with dataset 'cancer_sample'", {
expect_equal(count_NA(cancer_sample, "diagnosis"), as_tibble(summarise(cancer_sample, across(diagnosis, ~ sum(is.na(.x))))))
expect_equal(count_NA(cancer_sample, "radius_mean"), as_tibble(summarise(cancer_sample, across(radius_mean, ~ sum(is.na(.x))))))
expect_error(count_NA(cancer_sample, 123), "col_name needs to be a string")
expect_error(count_NA(cancer_sample, "diagnosis_year"), "'diagnosis_year' does not exist in the data")
expect_true(is_tibble(count_NA(cancer_sample, "diagnosis")))
})
use_test("group.NA")
test()
use_test("count.NA")
test
test()
test(0)
test()
library(testthat)
test()
library(count.NA)
test()
test()
library(devtools)
test()
test()
library(datateachr)
test()
library(gapminder)
library(dplyr)
test()
library(gapminder)
test()
library(count.NA)
test()
library(datateachr)
library(devtools)
test()
test
library(devtools)
test()
cancer_sample
library(datateachr)
cancer_sample
test()
library(gapminder)
library(tidyverse)
test()
library(cancer)
installed.packages("testthat", "dplyr", "tidyverse" "datateachr", "gapminder")
install.packages("testthat", "dplyr", "tidyverse" "datateachr", "gapminder")
install.packages(c("testthat", "tidyverse", "dplyr", "datateachr", "gapminder"))
